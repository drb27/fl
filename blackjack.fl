// Useful Functions
I=>(x)->x;
empty=>(l) -> l.size().eq(0);
reverse=>(l)-> l.size()==0? () : reverse(l.tail())::l.head();
rmap=>(f,l) -> empty(l)? () : rmap(f,l.tail())::f(l.head());
map=>(f,l)->reverse(rmap(f,l));
combiner=>(e,l)-> l.size()==0? () : combine(e,l.tail())::(e,l.head());
combine=>(e,l)-> reverse(combiner(e,l));
flatten=>(l,o)-> l.size()==0? o : flatten(l.tail(),o.join(l.head()));
countif=>(p,l) -> l.size()==0? 0 : { p(l.head())? 1 : 0 } + countif(p,l.tail());
accumulate=>(a,f,l) -> empty(l)? a : accumulate(f(a,l.head()),f,l.tail());
sum=>accumulate(0,(a,b)->a+b);

btoi=>(b)-> b? 1 : 0;

and=>(a,b)-> btoi(a).add(btoi(b))==2;
true.class().addmethod( (t,o)->and(t,o), "and" );


// Suit Enumeration
defenum suit (hearts,diamonds,clubs,spades);
defenum rank (two,three,four,five,six,seven,eight,nine,ten,jack,queen,king,ace);

// Card Class
defclass card(object);
card.addattr( "suit", suit.hearts );
card.addattr( "rank", rank.ace );
card.addmethod( (t,s,r)-> {t.suit=>s; t.rank=>r; t}, ".ctor" );
card.addmethod( (t,o)-> {t.rank==o.rank}.and(t.suit==o.suit) , "eq" );
card.addmethod( (t,o)-> { t.suit=>o.suit; t.rank=>o.rank; t }, ".assign" );

card.addmethod( (t) -> t.rank??   rank.two: 2 
		       		| rank.three: 3 
				| rank.four: 4
				| rank.five: 5
				| rank.six: 6
				| rank.seven: 7
				| rank.eight: 8
				| rank.nine: 9 
				| rank.ace: 11
				| default: 10 
		, "value" 
	      );

card.addmethod( (t)->  t.rank.convert("".class()) + ":" + t.suit.convert("".class())[0], ".render" );

make_card=>(l)-> { c=>card.new(); c.suit=>l[0]; c.rank=>l[1]; c };
make_suit_pairs=>(s)-> combine(s,foreach(rank,I));
make_suit=>(s)-> foreach( make_suit_pairs(s), (p)->make_card(p) );
make_deck=>()-> flatten( foreach( foreach(suit,I), (s)->make_suit(s)), () );

rep=>(x,y)-> y.size()==0? x: rep(x.join(y.head()),y.tail());

defclass deck(object);
deck.addattr("cards", () );
deck.addmethod( (t)-> { t.cards=>make_deck(); t }, ".ctor" );
deck.addmethod( (t) -> { rval=>t.cards.head(); t.cards=>t.cards.tail(); rval }, "deal" );
deck.addmethod( (t,i) -> t.cards[i], ".index" );
deck.addmethod( (t) -> t.cards, ".iter" );




