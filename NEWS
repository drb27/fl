fl release 0.0.5 13th March 2016

Added ranges and slices to the language. Slices are an operation on lists which allows the
user to take a subset of a list easily. Call the slice method on a list with a start and
end index, to return a new list with just the elements between the two bounds
specified. Note that the elements referred to by the two indices are included in the new
list. The original list is not modified. For example, (1,2,3,4).slice(1,2) returns a new
list, (2,3). 

Ranges are a way to quickly build lists represented by a sequence. A new double-dot
operator is defined to specify ranges. To use ranges, you must define a range(a,b) class
method on the class you want to add range support for. Then, when ecountering the
expression a..b, the interpreter will expand this to a.class().range(a,b). Future versions
of the language will include built-in implementations, e.g. for integer. 

Finally, equality is improved to be reflexive. Now a==b will be true if a.eq(b) is true,
OR if b.eq(a) is true. 

* 5fb8920 Fixed #56: Added slice method on lists
* 2c680a3 Fixed #55: Fixed issue with equality
* e101b8b Added ranges to the language
* 2e1d2dd Fixed #53: Undefined function names now throw evalsignal
* a30a99b Added unit test for ticket #52
* dad3960 Changed the way foundation equality works

--------------------------------------------------------------------------------

fl release 0.0.4 6th March 2016

Major changes from the previous release, including better memory management, syntax
changes, and new features to improve usability of the language. 

For memory management, ast objects are now properly tracked and destroyed, which was a
major memory leak issue in previous releases (every statement used memory and never freed
it). 

Changes to signals mean that signal *objects* are raised now, rather than the class
itself. This allows the user to pass data to signal class constructors to pass meaningful
information back up the chain to the handler. 

Selector statements are improved, allowing the user to specify a predicate to use for
matching the guard with the item being queried. 

Method calls are improved, it is now possible to pass a list of parameters to a methodcall
by reference, rather than specifying the list literally in the expression (you could
always do this for ordinary functions). 

Constructors are improved - the expression syntax has changed, and it is now possible to
specify which parameters are passed up to the constructor of the base. One can now
correctly derive a class from integer, for example, and pass a value up from the
constructor of the derived class to the constructor of the integer class. 

Finally, a simple hash() function have been provided on the object class, meaning each
object can produce a unique integer to represent itself. 

* d4369ae Fixed #12: Implement ast ownership scheme to stop leaks of ast objects
* c6a571c Fixed #52: Constructor chains don't skip missing constructors
* ddaed3d Added hash function for objects
* c4a9105 Changed sequence semicolon requirements
* c359025 Added signal handler to testsuite.fl
* f8fb84b Fixed #15: Methods can now be called with a symbol for params
* 1b80038 Added emacs mode for fl
* add7c0d Added the msg attribute to evalsignal
* 7fd5701 Fixed #51: You now raise signal objects, not signal classes
* 07f1c80 Added new initializer-list constructor to list_node
* ea08a7f Added class.member() builtin
* ab7ce91 Fixed #50: Added ability to specify predicate in selectors
* 8761b13 Fixed #46: Added evalsignal
* d2c8b81 Fixed #45: Signals now don't crash

--------------------------------------------------------------------------------

fl release 0.0.3 28th February 2016

Here are the interesting commits made since the previous release, v0.0.2. 
See github for ticket details (the repository is team-fl/fl). 


* fdb2a7b Fixed #44: Incorrect function evaluation
* 23d713b Basic signal functionality up and running
* b69e76b Fixed #43: Revamped object construction to support inheritance of builtins
* db4a51f Fixed #36: package scope for lvalues now correctly functional
* a7b39ea Fixed #41: Adding strings now supports auto conversion
* 5f5a378 Fixed #40: Added the print function
* cacb0a9 Fixed #39: Allowed digits in identifiers

--------------------------------------------------------------------------------

fl release 0.0.2 20th February 2016

Here are the commits made since the previous release, v0.0.1. 
See github for ticket details (the repository is team-fl/fl). 

* 1199aac (HEAD, upstream/dev, origin/dev, release-0.0.2, dev) Fixed #35: Current 
* e9e2758 Fixed #34: Merge branch 'pkg#2' into dev - introduced package system
* 37726ec Updated configure.ac and include file ordering in Makefile
* d3aae2d Integrated an fl-based test harness
* ae6c0a7 Added cd command to change working directory
* 6f71bcf Compatibility with the DEBUG macro definition
* 501c0e9 Fixed #21: Autotoools distribution now works
* 2568c93 Fixed #33: Currying in more than one stage now works
* 0dbb353 Fixed #32: Built-in functions can now be curried
* c60ac5b Fixed #17: interpreter now detects when an object cast cannot be complet
* 677f6f8 Fixed #27: detection of invalid enum values in defenum statement
* e71caf0 Moved examples into the fl folder
* 115d09c Added a way to write unit tests in fl
* 1b2986d Added parsing of hex integers
* c07a6eb Added the identity function I to builtins
* ea7ad88 Fixed #31: Operator precedence issue causing unexpected function evaluat
* 0042d7a Re-enabled params in function call trace
* 3553740 Added the eval command
* fc82abf HOTFIX Fixes #30: Argument conversions lead to incorrect function evalua
* b39d6cb Added the ability to return an exit code
* 4e2dc63 Started work on a library
* 90b3a94 Changed startup behaviour - no interactive shell if file loaded
* 81a6be8 Added #-style comments
* ad60faf Fixed #28: Added include command to pull in files
* c61b7d0 Fixed unit test framework broken by refactoring
* 57cf875 Removed files added in error
* a032e63 Added a basic tutorial
* 2cd1dc9 Refactored object.cpp and object.h into separate translation units under
* 90ccb3f Refactored ast classes into separate files
* 11f54fd HOTFIX Fixes #26: Conversion chains giving wrong result
* 77dde98 Fixed #24: defclass to introduce derived classes
* 813e671 Fixed #23: Added sealed classes and made declared enums sealed
